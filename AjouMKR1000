#include <WiFi101.h>

#include <Arduino.h>
#include <SPI.h>



#include "IoTMakers.h"
#include "Shield_Wrapper.h"

/*온습도 센서 DHT11 */
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <DHT_U.h>
#define DHTPIN            5         // 온습도센서 핀번호
//DHT11번 사용
#define DHTTYPE           DHT11     // DHT 11 
DHT_Unified dht(DHTPIN, DHTTYPE);
uint32_t delayMS;

/*모터 핀번호*/
#include <Servo.h>
Servo myservo;  // create servo object to control a servo
#define MotorPin         3   //서보모터핀

/*
Arduino Shield
*/

Shield_Wrapper	g_shield;

#define SDCARD_CS	4
void sdcard_deselect()
{
	pinMode(SDCARD_CS, OUTPUT);
	digitalWrite(SDCARD_CS, HIGH); //Deselect the SD card
}
void init_shield()
{
	sdcard_deselect();
	
	const char* WIFI_SSID = "공유기";
  const char* WIFI_PASS = "패스워드";
	g_shield.begin(WIFI_SSID, WIFI_PASS);

	g_shield.print();
}


/*
IoTMakers
*/
IoTMakers g_im;

const char deviceID[]   = "xxxx";
const char authnRqtNo[] = "xxxxx";
const char extrSysID[]  = "xxxxx";

void init_iotmakers()
{
	Client* client = g_shield.getClient();
	if ( client == NULL )	{
		Serial.println(F("No client from shield."));
		while(1);
	}

	g_im.init(deviceID, authnRqtNo, extrSysID, *client);
	g_im.set_numdata_handler(mycb_numdata_handler);
	g_im.set_strdata_handler(mycb_strdata_handler);
  g_im.set_strdata_handler(motor_strdata_handler); // Motor Contorl 이것으로 하겠습니다.
	g_im.set_dataresp_handler(mycb_resp_handler);

	// IoTMakers 서버 연결
	Serial.println(F("connect()..."));
	while ( g_im.connect() < 0 ){
		Serial.println(F("retrying."));
		delay(3000);
	}

	// Auth

	Serial.println(F("auth."));
	while ( g_im.auth_device() < 0 ) {
		Serial.println(F("fail"));
		while(1);
	}

	//Serial.print(F("FreeRAM="));Serial.println(g_im.getFreeRAM());
}

#define PIN_LED		6  //MKR1000은 6번 아두이노 UNO 13번

void setup() 
{
	Serial.begin(115200);
  	while ( !Serial )  {
	  ;
	}

	pinMode(PIN_LED, OUTPUT);
	digitalWrite(PIN_LED, HIGH);

	init_shield();
	
	init_iotmakers();

  myservo.attach(MotorPin);  // 서보모터 핀번호 설정
    
	digitalWrite(PIN_LED, LOW);

}

void loop()
{
	static unsigned long tick = millis();

	// 3초 주기로 센서 정보 송신
	if ( ( millis() - tick) > 3000 )
	{
		digitalWrite(PIN_LED, HIGH);
		send_temperature();
    send_humidity();
		//send_light();
		digitalWrite(PIN_LED, LOW);

		tick = millis();
 	}
  
	// IoTMakers 서버 수신처리 및 keepalive 송신
	g_im.loop();
}


int send_temperature()
{
	// Delay between measurements.
  delay(delayMS);
  // Get temperature event and print its value.
  sensors_event_t event;  
  dht.temperature().getEvent(&event);
   int t = event.temperature;

 Serial.print(F("Temperature (c): ")); Serial.println(t);
 if ( g_im.send_numdata("temperature", (double)t) < 0 ) {
     Serial.println(F(" send temp fail"));  
    return -1;
  }
  return 0; 
}

int send_humidity()
{
  // Delay between measurements.
  delay(delayMS);
  // Get temperature event and print its value.
  sensors_event_t event;  
  dht.humidity().getEvent(&event);
   int h = event.relative_humidity;

 Serial.print(F("humidity (%): ")); Serial.println(h);
 if ( g_im.send_numdata("humidity", (double)h) < 0 ) {
      Serial.println(F("send humidity fail"));  
    return -1;
  }
  return 0;   
}

int send_light()
{
	int tmpVal = analogRead(A1);
	int light = tmpVal/4;

	Serial.print(F("Light : ")); Serial.println(light);
	if ( g_im.send_numdata("light", (double)light) < 0 ){
  		Serial.println(F("fail"));  
		return -1;
	}
	return 0;   
}

void motor_strdata_handler(char *tagid, char *strval)
{
  // !!! USER CODE HERE
  Serial.print(tagid);Serial.print(F("="));Serial.println(strval);
  
  if ( strcmp(tagid, "motor")==0 && strcmp(strval, "on")==0 )   
      //digitalWrite(MotorPin, LOW);
      // analogWrite(MotorPin, 254);
       myservo.write(120);
  else if ( strcmp(tagid, "motor")==0 && strcmp(strval, "off")==0 )   
       //digitalWrite(MotorPin, HIGH);
       //analogWrite(MotorPin, 0);
       myservo.write(0);
}

void mycb_numdata_handler(char *tagid, double numval)
{
	// !!! USER CODE HERE
	//Serial.print(tagid);Serial.print(F("="));Serial.println(numval);
}
void mycb_strdata_handler(char *tagid, char *strval)
{
	// !!! USER CODE HERE
	//Serial.print(tagid);Serial.print(F("="));Serial.println(strval);
  
	if ( strcmp(tagid, "led")==0 && strcmp(strval, "on")==0 )  	
		digitalWrite(PIN_LED, HIGH);
	else if ( strcmp(tagid, "led")==0 && strcmp(strval, "off")==0 )  	
		digitalWrite(PIN_LED, LOW);
}
void mycb_resp_handler(long long trxid, char *respCode)
{
	if ( strcmp(respCode, "100")==0 )
		Serial.println("resp:OK");
	else
		Serial.println("resp:Not OK");
}
