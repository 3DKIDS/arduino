/*
ModuIoT Project
https://github.com/eugeneware/wiring-pi/blob/master/DOCUMENTATION.md
IoT4Pets
for CATS
*/

var express = require('express');
var os = require('os');
var util = require('util');
var EventEmitter = require('events').EventEmitter;
var app = express();

// set up handlebars view engine
var handlebars = require('express-handlebars').create({ defaultLayout:'main' });
app.engine('handlebars', handlebars.engine);
app.set('view engine', 'handlebars');


var wpi = require('wiring-pi');
        wpi.setup('wpi');

        var M_pin = 0; //motor pin 현재 LED연결한 상태

    var R_pir_pin = 2; //Right PIR sensor
        var R_pir_val = 0 ;

    var L_pir_pin = 3;  //LEFT PIR sensor
        var L_pir_val  = 0 ;

    var F_sw_pin = 4; // 앞 스위치
        var F_sw_val  = 0 ;

        var B_sw_pin = 5; //뒤 스위치
    var B_sw_val  = 0 ;

        var Btn =  1;// 즉시실행위한 버튼
    var Btn_val  = 0 ;

        /*모드설정*/
        wpi.pinMode( R_pir_pin, wpi.INPUT);  //오른쪽 모션센서
        wpi.pinMode( L_pir_pin, wpi.INPUT);  //왼쪽 모션센서
        wpi.pinMode(M_pin, wpi.OUTPUT);    // 모터
        wpi.pinMode(F_sw_pin , wpi.INPUT);  //앞 스위치
        wpi.pinMode(B_sw_pin, wpi.INPUT);  //뒤 스위치
        wpi.pinMode(Btn, wpi.INPUT);  //뒤 스위치

  /*값 읽기*/
        R_pir_val  = wpi.digitalRead (R_pir_pin);
        L_pir_val  = wpi.digitalRead (L_pir_pin);
        F_sw_val   = wpi.digitalRead (F_sw_pin);
        B_sw_val   = wpi.digitalRead (B_sw_pin);
        Btn_val    = wpi.digitalRead (Btn);



        console.log('Right PIR  value : ' + R_pir_val );
        console.log('Left PIR  value : ' + L_pir_val );
        console.log('front switch  value : ' + F_sw_val );
        console.log('baxk  switch  value : ' + B_sw_val );
        console.log('Button value: ' + Btn_val );

        console.log('Cat  visit time  : ' +  os.uptime() );

// This is object that generate(emit) events
var MotorControl = function(){

     EventEmitter.call(this);// EventEmitter 생성자 호출

}// funcMotor_control

util.inherits(MotorControl,EventEmitter);//상속설정

//this is listener
var MotorRunListener = function(M_pin){
        setTimeout(function() {
             wpi.digitalWrite(M_pin, 1);
    },10000);

    console.log('Motor Start time  : ' +  os.uptime() );
}

var MotorControl = new MotorControl();

MotorControl.on('MotorRun',MotorRunListener);



//반응 이벤트 캐치...
wpi.wiringPiISR( R_pir_pin, wpi.INT_EDGE_RISING, function(  ) {
    MotorControl.emit('MotorRun',M_pin);
        console.log('Pet motion detect 10miute later Clean!!!' );
        console.log('Pin No : ' + M_pin );
    //  wiringPiISRCancel( R_pir_pin);
});

wpi.wiringPiISR( Btn, wpi.INT_EDGE_RISING, function( ) {
                console.log('Button ok!!!' );
     wpi.digitalWrite(M_pin, 1);
});


//express web page control
app.set('port', process.env.PORT || 3000);

app.use(express.static(__dirname + '/public'));


app.get('/on', function(req, res) {
       // res.type('text/html');
       // res.send('청소끝');
       res.render('about');
        /*****/
        var value = 1;
        wpi.digitalWrite(M_pin, value);
        //clearTimeout(sT_obj);
        /*****/

});
app.get('/off', function(req,res){
        res.type('text/html');
        res.send('청소시작');

                /*****/
                var value = 0;
                wpi.digitalWrite(M_pin, value);
                /*****/
});

// 404 catch-all handler (middleware)
app.use(function(req, res, next){
        //res.type('text/plain');
        res.status(404);
        //res.send('404 - not Found');
        res.render('404');
});

// 500 error handler (middleware)
app.use(function(err, req, res, next){
        console.error(err.stack);
        res.status(500);
        res.render('500');
});

app.listen(app.get('port'), function(){
  console.log( 'Express started on http://localhost:' +
    app.get('port') + '; press Ctrl-C to terminate.' );
});
