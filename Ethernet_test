/*
  Web Server

 A simple web server that shows the value of the analog input pins.
 using an Arduino Wiznet Ethernet shield.

 Circuit:
 * Ethernet shield attached to pins 10, 11, 12, 13
 * Analog inputs attached to pins A0 through A5 (optional)

 created 18 Dec 2009
 by David A. Mellis
 modified 9 Apr 2012
 by Tom Igoe
 modified 02 Sept 2015
 by Arturo Guadalupi

modified 8 FEB 2016
by JONGWON SEO lovetang
 */

#include <SPI.h>
#include <Ethernet.h>

// Enter a MAC address and IP address for your controller below.
// The IP address will be dependent on your local network:
byte mac[] = {
  0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED
};
IPAddress ip(192, 168, 0, 88);

// Initialize the Ethernet server library
// with the IP address and port you want to use
// (port 80 is default for HTTP):
EthernetServer server(80);

int Led_Pin = 3;
String get_method_string = String(20); 

void setup() {

    //led control init
    pinMode(Led_Pin , OUTPUT);
    digitalWrite(Led_Pin , LOW);

  // Open serial communications and wait for port to open:
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }


  // start the Ethernet connection and the server:
  Ethernet.begin(mac, ip);
  server.begin();
  Serial.print("server is at ");
  Serial.println(Ethernet.localIP());


}


void loop() {
  // listen for incoming clients
  EthernetClient client = server.available();
  if (client) {
    Serial.println("new client");
    // an http request ends with a blank line
    boolean currentLineIsBlank = true;
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();

        if( get_method_string.length() <30 )
            get_method_string.concat(c);
            
        Serial.write(c);
        // if you've gotten to the end of the line (received a newline
        // character) and the line is blank, the http request has ended,
        // so you can send a reply
        if (c == '\n' && currentLineIsBlank) {
          // send a standard http response header
          client.println("HTTP/1.1 200 OK");
          client.println("Content-Type: text/html");
          client.println("Connection: close");  // the connection will be closed after completion of the response
          client.println("Refresh: 5");  // refresh the page automatically every 5 sec
          client.println();
          client.println("<!DOCTYPE HTML>");
          client.println("<html>");
          client.println("<head><title>Arduino IoT light ON OFF</title></head>");
          client.println("<body>");
          client.println("<br /> Arduino light ON OFF test  <br />  <br />  <br /> ");
          client.println("<form method=\"get\" name=\"led\"> ");
          client.println("<input type=\"submit\" name=\"btn1\" value=\"LED ON\"/> ");
          client.println("<input type=\"submit\" name=\"btn2\" value=\"LED OFF\"/> ");
          client.println("</form>");
          client.println("</body>");
          client.println("</html>");

          if(get_method_string.indexOf("btn1=LED+ON")!=-1){
                digitalWrite(Led_Pin, HIGH);
                Serial.println("=== LED ON");
          }else{
                digitalWrite(Led_Pin, LOW);
                Serial.println("=== LED OFF");
          }
          Serial.println("get_method_string = " + get_method_string);
          get_method_string = "";
          
          break;
        }//if (c == '\n' && currentLineIsBlank) 
        
        if (c == '\n') {
          // you're starting a new line
          currentLineIsBlank = true;
        } else if (c != '\r') {
          // you've gotten a character on the current line
          currentLineIsBlank = false;
        }// if (c == '\n') 
        
      }//if (client.available())
       
    }//while (client.connected()) 
    
    // give the web browser time to receive the data
    delay(1);
    // close the connection:
    client.stop();
    Serial.println("client disconnected");
    Ethernet.maintain();
    
  }// if (client) 
}//end loop
